<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Desi Penguin's Blog - tutorial</title><link href="http://mandarvaze.github.io/" rel="alternate"></link><link href="http://mandarvaze.github.io/feeds/tutorial.atom.xml" rel="self"></link><id>http://mandarvaze.github.io/</id><updated>2017-07-06T11:22:38+00:00</updated><entry><title>Sending Rich Text emails with mu4e</title><link href="http://mandarvaze.github.io/2017/07/sending-rich-text-emails-with-mu4e.html" rel="alternate"></link><published>2017-07-03T19:32:07-06:30</published><updated>2017-07-06T11:22:38+00:00</updated><author><name>Mandar Vaze</name></author><id>tag:mandarvaze.github.io,2017-07-03:/2017/07/sending-rich-text-emails-with-mu4e.html</id><summary type="html">&lt;div class="section" id="rich-text-in-emails"&gt;
&lt;h2&gt;Rich text in emails&lt;/h2&gt;
&lt;p&gt;I recently started using &lt;code&gt;mu4e&lt;/code&gt; exclusively for emails. I haven't opened
the browser based email client in more than a week.&lt;/p&gt;
&lt;p&gt;I almost never use &amp;quot;rich text&amp;quot; emails, so I didn't miss sending &amp;quot;rich&amp;quot; emails much.&lt;/p&gt;
&lt;p&gt;But sometimes it is nice (useful?) to make certain word …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="rich-text-in-emails"&gt;
&lt;h2&gt;Rich text in emails&lt;/h2&gt;
&lt;p&gt;I recently started using &lt;code&gt;mu4e&lt;/code&gt; exclusively for emails. I haven't opened
the browser based email client in more than a week.&lt;/p&gt;
&lt;p&gt;I almost never use &amp;quot;rich text&amp;quot; emails, so I didn't miss sending &amp;quot;rich&amp;quot; emails much.&lt;/p&gt;
&lt;p&gt;But sometimes it is nice (useful?) to make certain word(s) bold for the impact.&lt;/p&gt;
&lt;p&gt;and if one is using &amp;quot;rich text&amp;quot;, marking code/commands in fixed width font is always nice.
I always used to manually change the font in such cases, when using browser based email client.&lt;/p&gt;
&lt;p&gt;Since my needs were relatively low, using org-mode's mark-up was sufficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;To quickly summarize, how I was able to do that, here are the steps :&lt;/p&gt;
&lt;p&gt;(Note : My keybindings are spacemacs default. They may be different for you)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Start new email using &amp;quot;C&amp;quot;&lt;/li&gt;
&lt;li&gt;After entering to/subject etc, and switching to body section, do &lt;code&gt;org-mu4e-compose-org-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write email using org mode. When done, &lt;code&gt;org-mime-htmlize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch to headers area (This may not be needed, but I read reports somewhere that attempting to send email when in &amp;quot;body&amp;quot; part leads to some errors)&lt;/li&gt;
&lt;li&gt;Send using &lt;code&gt;C-c C-c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="trouble"&gt;
&lt;h2&gt;Trouble&lt;/h2&gt;
&lt;p&gt;During my first few &amp;quot;Test&amp;quot; emails, I (naturally) tried bullets, sub-bullets
(like one expects to have in an org file)&lt;/p&gt;
&lt;p&gt;This caused emails with TOC, and section numbers. It might be OK (even
desirable) when exporting an org-mode file to HTML file. But in an email, that
looks &amp;quot;odd&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;This was easily cured by adding &lt;code&gt;#+OPTIONS: toc:nil num:nil&lt;/code&gt; to the &amp;quot;email body&amp;quot;&lt;/p&gt;
&lt;p&gt;But I don't want to (remember to) add this each time I want &amp;quot;rich text&amp;quot; email.&lt;/p&gt;
&lt;p&gt;So these were created as global (?) settings in my &lt;code&gt;.spacemacs&lt;/code&gt; file as follows :&lt;/p&gt;
&lt;pre class="code elisp literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-export-with-section-numbers&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-export-with-toc&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You can read about other export related settings &lt;a class="reference external" href="http://orgmode.org/manual/Export-settings.html#Export-settings"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="another-problem"&gt;
&lt;h2&gt;Another problem&lt;/h2&gt;
&lt;p&gt;I did run into a little problem (still unresolved as of this writing)
See &lt;a class="reference external" href="https://www.reddit.com/r/emacs/comments/6ldthb/bug_in_exporting_source_block_from_orgmode_to_html/"&gt;this&lt;/a&gt; reddit thread&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="partial-solution"&gt;
&lt;h2&gt;Partial Solution&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Update : July 6th, 2017&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I found a workaround, that &amp;quot;works for me, for now&amp;quot;&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;#+BEGIN_SRC&lt;/code&gt; if I use &lt;code&gt;#+BEGIN_EXAMPLE&lt;/code&gt; - I don't get &amp;quot;bad characters&amp;quot;&lt;/p&gt;
&lt;p&gt;Off course, no syntax highlighting, but at least for my use cases - I didn't need it&lt;/p&gt;
&lt;p&gt;More over, if I were using standard browser-based email client, I do not get syntax highlighting any way.&lt;/p&gt;
&lt;p&gt;The email (bodies) were never meant to share &amp;quot;code snippets&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;Cross-posted from my other&lt;/em&gt; &lt;a class="reference external" href="https://mandarvaze.bitbucket.io/"&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="emacs"></category><category term="how-to"></category></entry><entry><title>Using local password manager</title><link href="http://mandarvaze.github.io/2017/06/using-local-password-manager.html" rel="alternate"></link><published>2017-06-17T12:57:48-06:30</published><updated>2017-06-17T12:57:48-06:30</updated><author><name>Mandar Vaze</name></author><id>tag:mandarvaze.github.io,2017-06-17:/2017/06/using-local-password-manager.html</id><summary type="html">&lt;div class="section" id="bit-of-history"&gt;
&lt;h2&gt;Bit of history&lt;/h2&gt;
&lt;p&gt;Long time ago I was using LastPass. and it worked well for me for a long time,
till it was acquired. I heard some &amp;quot;bad&amp;quot; things, which honestly I do not
remember, but it was probably like the &amp;quot;free&amp;quot; option will go away.&lt;/p&gt;
&lt;p&gt;I started looking for …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="bit-of-history"&gt;
&lt;h2&gt;Bit of history&lt;/h2&gt;
&lt;p&gt;Long time ago I was using LastPass. and it worked well for me for a long time,
till it was acquired. I heard some &amp;quot;bad&amp;quot; things, which honestly I do not
remember, but it was probably like the &amp;quot;free&amp;quot; option will go away.&lt;/p&gt;
&lt;p&gt;I started looking for options, and chanced upon Dashlane.&lt;/p&gt;
&lt;p&gt;Honestly it worked really well, but there is this inkling that I can't explain,
that I need to move out.&lt;/p&gt;
&lt;p&gt;I tried KeePass - but honestly, it just doesn't compare. It is a just a storage.
Without ability to autofill the login pages, it is just too cumbersome.&lt;/p&gt;
&lt;p&gt;I've been hearing great things about &lt;a class="reference external" href="https://www.passwordstore.org/"&gt;pass&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had tried it earlier in Feb 2017, but the companion browser addons did not
work (at that time) So I went back to Dashlane (I never stopped)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="import-the-data-from-dashlane"&gt;
&lt;h2&gt;Import the data from Dashlane&lt;/h2&gt;
&lt;p&gt;One of the issue was I wanted to import my existing data from Dashlane to
&lt;code&gt;pass&lt;/code&gt;. But this is &lt;strong&gt;not&lt;/strong&gt; natively supported. (For various valid
reasons) But there was an importer that worked with KeePass2 CSV file.&lt;/p&gt;
&lt;p&gt;This is a python script - very well written - I might add.&lt;/p&gt;
&lt;p&gt;It clearly documents the columns.&lt;/p&gt;
&lt;p&gt;Dashlane has &amp;quot;unsecure&amp;quot; export option, which exports the passwords in &amp;quot;normal&amp;quot;
CSV file.&lt;/p&gt;
&lt;p&gt;The sequence of the columns required by the importer wasn't far off.&lt;/p&gt;
&lt;p&gt;I manually fixed this issue, and populated the title column.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrade-issues"&gt;
&lt;h2&gt;Upgrade. Issues&lt;/h2&gt;
&lt;p&gt;Since my &lt;code&gt;pass&lt;/code&gt; was old, I decided to upgrade. Bunch of extensions also
required relatively newer version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew upgrade pass
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This upgraded &lt;code&gt;gpg&lt;/code&gt; as well. Warning says &amp;quot;backup ~/.gnupg&amp;quot;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv .gnupg .gnupg.back
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that &lt;code&gt;.gnupg&lt;/code&gt; was backed up, time to use the upgraded software.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew link --overwrite gnupg
pass init &amp;lt;PassStore Key&amp;gt;
python keepass2csv2pass.py dashlane-new.csv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most import failed because there was no gpg key&lt;/p&gt;
&lt;p&gt;So ..&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg2 --full-generate-key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;python keepass2csv2pass.py dashlane-new.csv&lt;/code&gt; worked.&lt;/p&gt;
&lt;p&gt;confirm using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pass about.me
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="autofill-aka-integration-with-the-browser"&gt;
&lt;h2&gt;Autofill aka Integration with the Browser&lt;/h2&gt;
&lt;p&gt;But &lt;code&gt;pass&lt;/code&gt; is a command line tool. It is just a backend for storage and
retrieval for the data.&lt;/p&gt;
&lt;p&gt;For autofill, there is  &lt;a class="reference external" href="https://github.com/dannyvankooten/browserpass"&gt;browserpass&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is some bug, which prevents autofill from working.&lt;/p&gt;
&lt;p&gt;The workaround was to unlock the passstore using &lt;code&gt;pass&lt;/code&gt; command from the
terminal first. I was asked for the passphrase interactively in the terminal.&lt;/p&gt;
&lt;p&gt;Once it was &amp;quot;unlocked&amp;quot;, I had to (re) start firefox from the terminal using
&lt;code&gt;open -a firefox&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As of this writing, see this open bugs related to gpg passphrase:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Firefox doesn't show gpg passphrase dialog &lt;a class="reference external" href="https://github.com/dannyvankooten/browserpass/issues/87"&gt;#87&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Firefox doesn't show gpg passphrase dialog &lt;a class="reference external" href="https://github.com/dannyvankooten/browserpass/issues/23"&gt;#23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/dannyvankooten/browserpass/issues/80"&gt;Unable to install chrome extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="keep-the-passstore-up-to-date"&gt;
&lt;h2&gt;Keep the passstore up to date&lt;/h2&gt;
&lt;p&gt;One time import is never enough when switching password manager. Ability to update existing entries and creating new ones is equally important.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; falls short here.&lt;/p&gt;
&lt;p&gt;Inserting new entry is not easy as using Dashlane (which is very well integrated
with the browser)&lt;/p&gt;
&lt;p&gt;But &amp;quot;extension&amp;quot; are supposed to take care of that. There is already a &lt;a class="reference external" href="https://github.com/dannyvankooten/browserpass/issues/24"&gt;feature
request&lt;/a&gt; on the
browserpass&lt;/p&gt;
&lt;p&gt;None the less, here is how you do it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pass insert group/username
Enter password &lt;span class="k"&gt;for&lt;/span&gt; group/username:
Retype password &lt;span class="k"&gt;for&lt;/span&gt; group/username:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had a bit of a problem, since I had imported my old GPG keys from gpg1 to gpg2&lt;/p&gt;
&lt;p&gt;When I used &lt;code&gt;pass insert&lt;/code&gt; for the first time I saw the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;There is no assurance this key belongs to the named user
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the working has changed a LOT (use of trustdb, as opposed to secring) I
need to explicitly trust the imported keys.&lt;/p&gt;
&lt;p&gt;The way to do this is &amp;quot;edit&amp;quot; the key and set the trust level explicitly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Get the list of keys&lt;/span&gt;
gpg2 --list-keys
&lt;span class="c1"&gt;# Edit the key(s) you just imported&lt;/span&gt;
gpg2 --edit-key &amp;lt;KEYID&amp;gt;
&lt;span class="c1"&gt;# When asked, choose the trust level (5) being maximum, called ultimate&lt;/span&gt;
&lt;span class="c1"&gt;# confirm with &amp;quot;y&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;On a related note, &lt;a class="reference external" href="https://keepassxc.org/"&gt;KeePassXC&lt;/a&gt;, along with &lt;a class="reference external" href="https://addons.mozilla.org/en-us/firefox/addon/passifox/"&gt;PassIFox&lt;/a&gt; looks promising.
I'm waiting for &lt;a class="reference external" href="https://github.com/pfn/passifox/issues/634"&gt;this&lt;/a&gt; issue to be
fixed so that I can continue to enable multiprocess support in Firefox.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;Cross-posted from my other&lt;/em&gt; &lt;a class="reference external" href="https://mandarvaze.bitbucket.io/"&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="security"></category><category term="gpg"></category><category term="gpg2"></category><category term="password"></category><category term="how-to"></category></entry><entry><title>Token Based Authentication with Flask-Security</title><link href="http://mandarvaze.github.io/2015/01/token-auth-with-flask-security.html" rel="alternate"></link><published>2015-01-15T00:00:00+00:00</published><updated>2015-02-03T00:00:00+00:00</updated><author><name>Mandar Vaze</name></author><id>tag:mandarvaze.github.io,2015-01-15:/2015/01/token-auth-with-flask-security.html</id><summary type="html">
&lt;!-- 1  Intro
2  Define User and Roles
3  Configurations
4  API Endpoint
5  Lets Test
6  Another Configuration
7  Get the Token --&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Intro&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I'm working on a Flask based API server (why Flask, why not xyz - is a topic for another discussion, but FWIW I am considering Django)&lt;/p&gt;
&lt;p&gt;As you know, Flask is a micro framework - that means a lot of "features" that are built-in into other frameworks aren't part of Flask …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;!-- 1  Intro
2  Define User and Roles
3  Configurations
4  API Endpoint
5  Lets Test
6  Another Configuration
7  Get the Token --&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Intro&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I'm working on a Flask based API server (why Flask, why not xyz - is a topic for another discussion, but FWIW I am considering Django)&lt;/p&gt;
&lt;p&gt;As you know, Flask is a micro framework - that means a lot of "features" that are built-in into other frameworks aren't part of Flask. But there are several third party Flask extension. Flask-Security is one of them (Flask-Restless is another one I'll be using)&lt;/p&gt;
&lt;p&gt;Unfortunately, documentation for Flask-Security isn't up to the mark (at least as of this writing). I know this could be flame-bait, but it is not. Sometimes users need more sample code along with documentation, which seems to be missing here, and I am not alone. Just looking at the SO and other places people are "stuck" - lack of tutorials is evident.&lt;/p&gt;
&lt;p&gt;I went thru the documentation, SO links, Google Searches, Flask-Security code walk thru, debugging that code, looking at the Flask-Security test cases. All of it finally was worth it, because I was able to get Token based Authentication to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="define-user-and-roles"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Define User and Roles&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Basic code that defines the &lt;tt class="docutils literal"&gt;User&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Role&lt;/tt&gt; classes, initializes Flask-Security extension.
This is not different from what is available in the documentation (Except may be additional attributes for &lt;tt class="docutils literal"&gt;User&lt;/tt&gt; class)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A base model for other database tables to inherit&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__abstract__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_timestamp&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;modified_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_timestamp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                            &lt;span class="n"&gt;onupdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_timestamp&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="n"&gt;roles_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'roles_users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                                 &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth_user.id'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                       &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'role_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                                 &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth_role.id'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoleMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'auth_role'&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;Role &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'auth_user'&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;confirmed_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;last_login_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;current_login_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c1"&gt;# Why 45 characters for IP Address ?&lt;/span&gt;
    &lt;span class="c1"&gt;# See http://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address/166157#166157&lt;/span&gt;
    &lt;span class="n"&gt;last_login_ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;current_login_ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;login_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Role'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;roles_users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dynamic'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;User &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;


&lt;span class="c1"&gt;# Setup Flask-Security&lt;/span&gt;
&lt;span class="n"&gt;user_datastore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemyUserDatastore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;security&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Security&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_datastore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Create a user to test with&lt;/span&gt;
&lt;span class="nd"&gt;@app.before_first_request&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;user_datastore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'test@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'test123'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configurations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Configurations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the &lt;tt class="docutils literal"&gt;config.py&lt;/tt&gt; I have following flask security configurations (for now - more will come)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SECURITY_PASSWORD_HASH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'pbkdf2_sha512'&lt;/span&gt;
&lt;span class="n"&gt;SECURITY_TRACKABLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SECURITY_PASSWORD_SALT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'something_super_secret_change_in_production'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="api-endpoint"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;API Endpoint&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Add a dummy API endpoint like this :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_security&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;auth_token_required&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/dummy-api/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nd"&gt;@auth_token_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dummyAPI&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ret_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"Key1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Value1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"Key2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"value2"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ret_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lets-test"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Lets Test&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now all the pieces are set. Lets test.&lt;/p&gt;
&lt;p&gt;Lets try whether authentication itself works.&lt;/p&gt;
&lt;p&gt;First change  the &lt;tt class="docutils literal"&gt;@auth_token_required&lt;/tt&gt; decorator to &lt;tt class="docutils literal"&gt;@http_auth_required&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Now you can now access the URL &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;127.0.0.1:5001/dummy-api/&lt;/span&gt;&lt;/tt&gt; via the browser.
You will see a pop up dialog that asks for the username and password&lt;/p&gt;
&lt;p&gt;Enter the email as username and password we created earlier with &lt;tt class="docutils literal"&gt;create_user&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;If you dismiss without username password - you should see message starting with "Unauthorized"
If you entered the email and password correctly - you should see the dummy JSON data we returned in the browser page.&lt;/p&gt;
&lt;p&gt;One other option is to use a program like curl or http (I prefer this. &lt;tt class="docutils literal"&gt;pip install httpie&lt;/tt&gt;) e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:5001/dummy-api/
HTTP/1.0 &lt;span class="m"&gt;401&lt;/span&gt; UNAUTHORIZED
Content-Length: &lt;span class="m"&gt;271&lt;/span&gt;
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
Date: Wed, &lt;span class="m"&gt;14&lt;/span&gt; Jan &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;07&lt;/span&gt;:56:55 GMT
Server: Werkzeug/0.9.6 Python/3.4.0
Set-Cookie: &lt;span class="nv"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eyJfaWQiOiIwZTMxMDBkNmMwNmY0MmQyNmU3MDBhYTZkMzUxZmM4OSJ9.B5eyxw.074cU7O6pJha_qomfuUOG2CvZNg&lt;span class="p"&gt;;&lt;/span&gt; HttpOnly&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/
WWW-Authenticate: Basic &lt;span class="nv"&gt;realm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Login Required"&lt;/span&gt;

&amp;lt;h1&amp;gt;Unauthorized&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;The server could not verify that you are authorized to access the URL
    requested. You either supplied the wrong credentials &lt;span class="o"&gt;(&lt;/span&gt;e.g. a bad password&lt;span class="o"&gt;)&lt;/span&gt;,
    or your browser doesn&lt;span class="err"&gt;'&lt;/span&gt;t understand how to supply the credentials required.&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now provide the authentication details, and see the expected response :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http -a test@example.com:test123 &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:5001/dummy-api/
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Content-Length: &lt;span class="m"&gt;63&lt;/span&gt;
Content-Type: application/json
Date: Wed, &lt;span class="m"&gt;14&lt;/span&gt; Jan &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;08&lt;/span&gt;:03:50 GMT
Server: Werkzeug/0.9.6 Python/3.4.0
Set-Cookie: &lt;span class="nv"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eyJfaWQiOiIwZTMxMDBkNmMwNmY0MmQyNmU3MDBhYTZkMzUxZmM4OSJ9.B5e0Zg.9-MG7d6XQ3zFnsNEz6NR7LtEC6Y&lt;span class="p"&gt;;&lt;/span&gt; HttpOnly&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"items"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"Key1"&lt;/span&gt;: &lt;span class="s2"&gt;"Value1"&lt;/span&gt;,
        &lt;span class="s2"&gt;"Key2"&lt;/span&gt;: &lt;span class="s2"&gt;"value2"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far so good. I was able to achieve this without too much trouble (Actually that is not true, but ..)&lt;/p&gt;
&lt;p&gt;Lets move on to Token based Authentication. This is where things got a bit tricky (for me)
There seemed to be several people on SO with similar problems. (Hence this post - so that others in future can get some help)&lt;/p&gt;
&lt;p&gt;First, before we forget, change the &lt;tt class="docutils literal"&gt;@http_auth_required&lt;/tt&gt; decorator back to &lt;tt class="docutils literal"&gt;@auth_token_required&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Now to "get" the auth token. Per Flask Security documentation :&lt;/p&gt;
&lt;blockquote&gt;
Token based authentication is enabled by retrieving the user auth token by
performing an HTTP POST with the authentication details as JSON data against
the authentication endpoint. A successful call to this endpoint will return
the user’s ID and their authentication token. This token can be used in
subsequent requests to protected resources.&lt;/blockquote&gt;
&lt;p&gt;First of all - the documentation doesn't specify which &lt;em&gt;authentication endpoint&lt;/em&gt; ?
Do I need to create one, or does Flask-Security provide me one by default ?&lt;/p&gt;
&lt;p&gt;Turns out &lt;tt class="docutils literal"&gt;/login&lt;/tt&gt; is that default provided by Flask-Security
(An older post on flask mailing list mentioned &lt;tt class="docutils literal"&gt;/auth&lt;/tt&gt;. May be it was, in 2012. Not anymore)&lt;/p&gt;
&lt;p&gt;Testing &lt;tt class="docutils literal"&gt;http_auth&lt;/tt&gt; was easy, also it was a &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; request. Performing &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; request isn't trivial.
At first I tried Postman client (Chrome Extension) - But it didn't work.&lt;/p&gt;
&lt;p&gt;Then on SO - I came across &lt;a class="reference external" href="http://stackoverflow.com/questions/24186694/combining-flask-restless-flask-security-and-regular-python-requests"&gt;this&lt;/a&gt; post. While that person went with &lt;cite&gt;Flask-JWT&lt;/cite&gt; - I didn't need to. It gave me an idea of using &lt;cite&gt;requests&lt;/cite&gt; for the &lt;cite&gt;POST&lt;/cite&gt; call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="another-configuration"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Another Configuration&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But before all is well - we need one entry in config.py as follows :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Without this get_auth_token via POST request w/ JSON data does not work&lt;/span&gt;
&lt;span class="c1"&gt;# You keep getting "CSRF token missing" error&lt;/span&gt;
&lt;span class="n"&gt;WTF_CSRF_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="get-the-token"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Get the Token&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I did the following in ipython console - but one can very well convert this to a stand alone script, if needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:5001/login'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'test@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'test123'&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="s1"&gt;'response'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'authentication_token'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'WyIxIiwiY2UwZWY0MDFjYTA3MmJlODcyODkzYjYxOGQzZjk4YzUiXQ.B5e5Sg.qcsDcaMgiRqx21YTC0OwwnihINM'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I can use this token with http as follows :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:5001/dummy-api/ Authentication-Token:WyIxIiwiY2UwZWY0MDFjYTA3MmJlODcyODkzYjYxOGQzZjk4YzUiXQ.B5e5Sg.qcsDcaMgiRqx21YTC0OwwnihINM
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Content-Length: &lt;span class="m"&gt;63&lt;/span&gt;
Content-Type: application/json
Date: Wed, &lt;span class="m"&gt;14&lt;/span&gt; Jan &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;08&lt;/span&gt;:26:48 GMT
Server: Werkzeug/0.9.6 Python/3.4.0
Set-Cookie: &lt;span class="nv"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eyJfaWQiOiIwZTMxMDBkNmMwNmY0MmQyNmU3MDBhYTZkMzUxZmM4OSJ9.B5e5yA.Oog7nYYA6zSvWjyS7mVUUropKj8&lt;span class="p"&gt;;&lt;/span&gt; HttpOnly&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"items"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"Key1"&lt;/span&gt;: &lt;span class="s2"&gt;"Value1"&lt;/span&gt;,
        &lt;span class="s2"&gt;"Key2"&lt;/span&gt;: &lt;span class="s2"&gt;"value2"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Success !!!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I'm yet to separate the Flask-Security related code into a separate file. When I did that hell broke loose. For now I have everything under myapp/__init__.py file. May be I'll cover that in another blog post&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="python"></category><category term="learning"></category></entry><entry><title>Ghost on Openshift</title><link href="http://mandarvaze.github.io/2013/12/ghost-on-openshift.html" rel="alternate"></link><published>2013-12-31T00:00:00+00:00</published><updated>2013-12-31T00:00:00+00:00</updated><author><name>Mandar Vaze</name></author><id>tag:mandarvaze.github.io,2013-12-31:/2013/12/ghost-on-openshift.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://openshift.redhat.com"&gt;Openshift&lt;/a&gt; is PAAS from redhat, &lt;a class="reference external" href="https://ghost.org/"&gt;Ghost&lt;/a&gt; is a new blogging platform built using node.js and supports writing the posts in Markdown format&lt;/p&gt;
</summary><content type="html">
&lt;!-- 1  Email Setup
2  Theme Setup
3  Intuition helps --&gt;
&lt;p&gt;Installing Ghost wasn't difficult at all, especially with all the &lt;a class="reference external" href="https://www.openshift.com/quickstarts/ghost-on-openshift"&gt;great documentation&lt;/a&gt; supplied by Openshift community&lt;/p&gt;
&lt;div class="section" id="email-setup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Email Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As soon as I did initial deployment, I got a notification that I need to fix the email configuration. I went with default setup using the Mailgun setup recommended by &lt;a class="reference external" href="http://docs.ghost.org/mail/"&gt;the documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="theme-setup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Theme Setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next thing was to change the default casper theme. This turned surprisingly difficult (here is where intuition that one builds due to the experience comes in handy .. more on that a little later)&lt;/p&gt;
&lt;p&gt;As listed on the &lt;a class="reference external" href="http://docs.ghost.org/themes/"&gt;ghost documentation&lt;/a&gt; I went to the &lt;a class="reference external" href="http://marketplace.ghost.org/"&gt;marketplace gallary&lt;/a&gt; and liked Vapor and Ghostium themes.&lt;/p&gt;
&lt;p&gt;I assumed (not completely incorrect though) that I need to clone the theme projects into ../content/themes folder, along side the casper folder that came by default. I did the same for both the themes.&lt;/p&gt;
&lt;p&gt;Next thing was to "apply" these to my installation. After having these two theme folders, I thought all I needed was to restart the application using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rhc app-restart appname
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I went the settings page, but no new themes .. Hmm ..&lt;/p&gt;
&lt;p&gt;But I quickly realized that the way openshift deployments work (not unlike heroku, which I haven't used) is by pushing any changes to the git repo. So added both the theme folders to git (along with previous changes for the mail setup I did earlier.&lt;/p&gt;
&lt;p&gt;Restarted the app&lt;/p&gt;
&lt;p&gt;OK, now two new themes appeared in the drop down.
Selected one, clicked "Save", went on to the main page, and ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Failed to lookup view &lt;span class="s2"&gt;"index"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, so this theme may be bad, let me try another one. Same error. What could be wrong ?&lt;/p&gt;
&lt;p&gt;Google search revealed that this errors shows up when index.hbs and post.hbs files are missing (They were not for either of the themes)&lt;/p&gt;
&lt;p&gt;Luckily, I could go back to default casper theme. (But then I didn't like it so much, that is why I needed a different theme)&lt;/p&gt;
&lt;p&gt;So I tried another theme from the forums. This one was available only as a zip file.. and guess what - this worked.&lt;/p&gt;
&lt;p&gt;Hmm ..&lt;/p&gt;
&lt;p&gt;One of the theme I chose was a "Featured" theme, so it can't have wrong code ..&lt;/p&gt;
&lt;p&gt;I downloaded the ZIP file of the same repo from the github (contents would be same, except I won't be able to update the theme easily)
As suggested somewhere - I had also checked the file permissions (all were 644/rw-r--r--) same as in the ZIP file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="intuition-helps"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Intuition helps&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I'm not sure what made me use the ZIP files (from github) in place of the cloned repo. The previous theme that worked may have something to do with it.&lt;/p&gt;
&lt;p&gt;I think it is intuition from troubleshooting various problems over the years.&lt;/p&gt;
&lt;p&gt;But it worked. I got the zip file, and placed it at the same place, git commit/push/restart later, I was successfully able to apply the new theme.&lt;/p&gt;
&lt;p&gt;I am still not sure what is the difference, may be I'll troubleshoot more, but that would be the topic for another post.&lt;/p&gt;
&lt;p&gt;2013 ended with a Bang !!!&lt;/p&gt;
&lt;p&gt;2014 will be equally fulfilling and challenging.&lt;/p&gt;
&lt;hr class="docutils"/&gt;
&lt;p&gt;&lt;em&gt;This article was originally published on the newly deployed ghost blog on openshift - Duh !! The reason to reproduce it here is because I haven't (yet) spent time to figure out if and how I can backup my posts. I've been bitten twice, so I am being careful. Plus this will remain my primary blog anyway, although publishing on Ghost was a pleasure, more on that later, in another post perhaps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Since I used reStructuredText format instead of markdown for this blog, it took a little more effort than I had expected&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="troubleshooting"></category><category term="blogging"></category><category term="ghost"></category><category term="openshift"></category></entry><entry><title>How to convert posterous blog to Markdown</title><link href="http://mandarvaze.github.io/2013/04/posterous-to-markdown.html" rel="alternate"></link><published>2013-04-23T00:00:00+00:00</published><updated>2013-04-23T00:00:00+00:00</updated><author><name>Mandar Vaze</name></author><id>tag:mandarvaze.github.io,2013-04-23:/2013/04/posterous-to-markdown.html</id><summary type="html">&lt;p class="first last"&gt;This post should be helpful (if only for next few days) for those who want to &lt;em&gt;save&lt;/em&gt; their posterous blogs.&lt;/p&gt;
</summary><content type="html">
&lt;!-- 1  Option 1
2  Option 2
3  Fun Begins
4  Modifying posterous gem
5  Getting the images
6  This is just the beginning --&gt;
&lt;p&gt;As I have written in a &lt;a class="reference external" href="http://mandarvaze.github.io/2013/04/why-move-to-static-blog.html"&gt;previous&lt;/a&gt; post, I recently consolidated all of various blogs into this one.
Big one was posterous, especially because it is going away in a few days time, and I had two separate blogs (spaces as they used to call it) with them.
While the other posts talked about &lt;em&gt;why&lt;/em&gt; this one talks about &lt;em&gt;How&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="option-1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Option 1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Posterous provides a backup of all your articles, in XML format. while initially I thought this format may not be useful for importing into pelican, looking back, it might be. I haven't tried it, so I don't know whether it helps. For more details  refer to the &lt;a class="reference external" href="http://docs.getpelican.com/en/3.1.1/importer.html"&gt;pelican documentation&lt;/a&gt;
Hopefully this is easier of the two routes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="option-2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Option 2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First you need to "get" your postreous posts from their server to your local machine.
You can use this &lt;a class="reference external" href="https://github.com/bmann/posterous-export/blob/master/posterous-export.rb"&gt;original&lt;/a&gt; script.&lt;/p&gt;
&lt;p&gt;I had to make some &lt;a class="reference external" href="https://github.com/mandarvaze/posterous-export/blob/master/posterous-export.rb"&gt;changes&lt;/a&gt; to the script, to make it work for me. I suggest you keep both of them handy.
&lt;em&gt;I am not a ruby developer. so my changes are rudimentary, not the way ruby developer would do. But based on the logic, some old style debugging, and stackover help for ruby syntax, I was able to get it to work.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fun-begins"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Fun Begins&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the script to work, you need (ruby off course) posterous "gem". Consider this as a library or a package, if you aren't familair with Ruby.
not being a ruby programmer, I didn't know this, so I got the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo gem install posterous
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; mandar:
Fetching: ffi-1.7.0.gem &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;
Building native extensions.  This could take a &lt;span class="k"&gt;while&lt;/span&gt;...
ERROR:  Error installing posterous:
    ERROR: Failed to build gem native extension.

    /usr/bin/ruby1.9.1 extconf.rb
 /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in &lt;span class="sb"&gt;`&lt;/span&gt;require&lt;span class="s1"&gt;': cannot load such file -- mkmf (LoadError)&lt;/span&gt;
&lt;span class="s1"&gt;     from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require'&lt;/span&gt;
     from extconf.rb:4:in &lt;span class="sb"&gt;`&lt;/span&gt;&amp;lt;main&amp;gt;&lt;span class="err"&gt;'&lt;/span&gt;

 Gem files will remain installed in /var/lib/gems/1.9.1/gems/ffi-1.7.0 &lt;span class="k"&gt;for&lt;/span&gt; inspection.
 Results logged to /var/lib/gems/1.9.1/gems/ffi-1.7.0/ext/ffi_c/gem_make.out
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some googline revealed that this is a know problem which can be fixed by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ruby1.9.1-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I was successfully able to install the posterous gem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modifying-posterous-gem"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Modifying posterous gem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Original error went away, the script moved forward till the next error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The option: username is invalid. &lt;span class="o"&gt;(&lt;/span&gt;Ethon::Errors::InvalidOption&lt;span class="o"&gt;)&lt;/span&gt;
Please try userpwd instead of username.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Found the &lt;a class="reference external" href="https://github.com/posterous/posterous-gem/issues/5#issuecomment-13539354"&gt;workaround&lt;/a&gt; on github posterous gem issues list&lt;/p&gt;
&lt;p&gt;Now that initial problem went away, I started getting the problems in the script itself. Good thing was I learnt &lt;a class="reference external" href="http://stackoverflow.com/questions/3955688/how-do-i-debug-ruby-scripts"&gt;debugging&lt;/a&gt; ruby script via printf method.
Realized there was problem w/ save_media. So at first I commented this function call, and then eveything was OK. I successfuly downloaded all my posts from one of the blogs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-the-images"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Getting the images&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I was partially successful, I wanted to make sure I get the images as well. So I added further debug/printf like statements, and in the process learnt about "if my_object.nil? " &lt;a class="reference external" href="http://lukaszwrobel.pl/blog/ruby-is-nil"&gt;idiom&lt;/a&gt;
With that I was able to get the images as well from my second blog. (and then another pass at my first blog, with images)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-is-just-the-beginning"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;This is just the beginning&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you have your posts from posterous secured, the "deadline" pressure of posterous going away on April 30th, 2013 is removed. But I coulnd't just use the converted files as is.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Markdown files didn't work with pelican directly, even after installing Markdown python module in my virtual environment. I ran into &lt;a class="reference external" href="http://martinbrochhaus.com/2012/02/pelican.html#comment-726961261"&gt;this&lt;/a&gt; error. (&lt;em&gt;BTW, you should totally boormark the article on which the comment is made&lt;/em&gt;) So I &lt;em&gt;hand converted&lt;/em&gt; the md files to rst. It didn't take that long, but was a manual process.&lt;/li&gt;
&lt;li&gt;Links from posterous don't work, especially for images that were uploaded to posterous. These links point to posterous' own Amazon S3 (which will also go away soon) But you have the images downloaded by the ruby script, so all the links need to be fixed (manually)&lt;/li&gt;
&lt;li&gt;I also did some editing. Not all my posts were moved. e.g. One of my posts "Why posterous rocks" didn't make it to this blog :)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am still learning the rst and pelican, so reference to local images folder works "partially" Luckily, most other places, I was already referring to third party image URL, so it didn't matter.&lt;/p&gt;
&lt;/div&gt;
</content><category term="how-to"></category><category term="ruby"></category><category term="learning"></category></entry><entry><title>Installing linux on HP Pavilion m6</title><link href="http://mandarvaze.github.io/2013/02/linux-on-hp-pavilion-m6.html" rel="alternate"></link><published>2013-02-17T00:00:00+00:00</published><updated>2013-02-17T00:00:00+00:00</updated><author><name>Mandar Vaze</name></author><id>tag:mandarvaze.github.io,2013-02-17:/2013/02/linux-on-hp-pavilion-m6.html</id><summary type="html">&lt;p class="first last"&gt;Main problem that needs solving is that machine comes preinstalled with four partitions, thus not allowing to create a new partition to boot from.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;After my trusty? Lenovo Thinkpad R400 developed problems (immediately after the 3 year warranty expired) I had to buy a new laptop. After initially thinking of ultrabook, I finally bought HP Pavilion m6.&lt;/p&gt;
&lt;p&gt;Since I needed this laptop for my work, I needed linux on it. I had &lt;em&gt;tried&lt;/em&gt; a live USB on linux mint 13 before I paid for the machine, so I was sure that linux support would not be an issue. Live boot confirmed that display and Wireless worked without problems.&lt;/p&gt;
&lt;p&gt;Before I decided to make changes, I created the rescue disk (Just to be safe) I ended up needing those not long after :( - By the way, as an aside, it is important to note that rescue disk creator program does &lt;strong&gt;not&lt;/strong&gt; accept DVR+RW the ones that can be used to write multiple times. So I had to go back to the shop to get them replaced.&lt;/p&gt;
&lt;p&gt;The main problem is that the machine already has 4 primary partitions. Thus linux installer is unable to create a new partition to boot from.
After looking thru forums, I realized that HP_tools partition can be easily removed. Way to do is :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;First assign a drive letter to HP_TOOLS partition&lt;/li&gt;
&lt;li&gt;Copy the files to recovery partition&lt;/li&gt;
&lt;li&gt;Delete the HP_TOOLS partition -&lt;/li&gt;
&lt;li&gt;Recreate if needed, recreated as logical - thus solving max primary partitions problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the max partition problem is resolved, installing linux isn't difficult.&lt;/p&gt;
&lt;p&gt;One other thing I did differently was to use Windows boot loader as default instead of GRUB (Felt safe at the time) I used &lt;a class="reference external" href="http://neosmart.net/EasyBCD/"&gt;EasyBCD&lt;/a&gt;
So now I first get Windows bootloader which lets me choose between windows and Linux mint 14 (which is the default) But once I select Linux mint, I get GRUB bootloader (which also consists on Windows 7 entry) So may be I didn't need &lt;a class="reference external" href="http://neosmart.net/EasyBCD/"&gt;EasyBCD&lt;/a&gt; after all. YMMV.&lt;/p&gt;
</content><category term="linux"></category><category term="how-to"></category><category term="hp-m6"></category></entry></feed>